Given an unsorted integer array, find the smallest missing positive integer.

Example 1:
Input: [1,2,0]
Output: 3

Example 2:
Input: [3,4,-1,1]
Output: 2

Example 3:
Input: [7,8,9,11,12]
Output: 1

Follow up:
Your algorithm should run in O(n) time and uses constant extra space.


CODE:

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) 
    {
        int i = 0;
        
        while (i < nums.size()){
            if (nums[i] <= 0 || nums[i] > nums.size() || nums[i] - 1 == i || nums[nums[i] - 1] == nums[i]){
                i++;   
            }
            else{
                swap(nums[i] ,nums[nums[i] - 1]);
            }
        }
        
        for (int i = 0; i <  nums.size(); i++){
            if((nums[i] - 1) != i)
                return i + 1;
        }
        
        return  nums.size() + 1;
    }
};
