Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai < 231.

Find the maximum result of ai XOR aj, where 0 ≤ i, j < n.

Could you do this in O(n) runtime?

Example:
Input: [3, 10, 5, 25, 2, 8]
Output: 28
Explanation: The maximum result is 5 ^ 25 = 28.


class Solution {
public:
    
    class trieNode{
    public:
        trieNode* left;     //Represents 0
        trieNode* right;    //Represents 1   
    };

    void insert(int n, trieNode *head){
        trieNode* curr = head;
        for(int i=31;i>=0;i--){
            int bit = (n >> i) & 1;
            if(bit == 0){
                if(curr->left == NULL){
                    curr->left = new trieNode();
                }
                curr = curr->left;
            }
            else{
                if(curr->right == NULL){
                    curr->right = new trieNode();
                }
                curr = curr->right;
            }
        }
    }

    int findMaxXorPair(trieNode* head, vector<int> arr, int n, int el){
        int max_xor = INT_MIN;
        trieNode* curr = head;
        int value = el;
        int curr_xor = 0;

        for(int j=31;j>=0;j--){
            int b = (value >> j) & 1;
            if(b==0){
                //current bit is 0 , so we find try to find 1 for max xor value , if we get 1 then good
                if(curr->right != NULL){
                    curr = curr->right;
                    curr_xor += (int)pow(2,j);
                }
                //otherwise we will settle with 0
                else{
                    curr = curr->left;
                }
            }
            else{
                //current bit is 1 , so we find try to find 0 for max xor value , if we get 0 then good
                if(curr->left != NULL){
                    curr = curr->left;
                    curr_xor += (int)pow(2,j);
                }
                //otherwise we will settle with 1
                else{
                    curr = curr->right;
                }
            }
        }

        if(curr_xor>max_xor){
            max_xor = curr_xor;
        }

        return max_xor;

    }
    
    int findMaximumXOR(vector<int>& nums) {
        int n = nums.size();
        trieNode* head = new trieNode();
        int result = INT_MIN;
        for(int i=0;i<n;i++){
            insert(nums[i],head);
            int x = findMaxXorPair(head, nums, n, nums[i]);
            result = (result < x) ? x : result;
        }
        return result;
    }
};
