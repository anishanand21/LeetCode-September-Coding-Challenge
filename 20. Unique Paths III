On a 2-dimensional grid, there are 4 types of squares:

1 represents the starting square.  There is exactly one starting square.
2 represents the ending square.  There is exactly one ending square.
0 represents empty squares we can walk over.
-1 represents obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

Example 1:
  Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
  Output: 2
  Explanation: We have the following two paths: 
  1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
  2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)

Example 2:
  Input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
  Output: 4
  Explanation: We have the following four paths: 
  1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
  2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
  3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
  4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)

Example 3:
  Input: [[0,1],[2,0]]
  Output: 0
  Explanation: 
  There is no path that walks over every empty square exactly once.

Note that the starting and ending square can be anywhere in the grid.


class Solution {
public:
    int totalPath = 0;
    
    void dfs(vector<vector<int>> grid, int i, int j, int totalZero) {
        //out of bound and obstacle condition check. also if we reach final destination and totalZero is not equal to zero then also return
        if(i<0 || j<0 || i>grid.size()-1 || j>grid[0].size()-1 || grid[i][j]==-1 || (grid[i][j]==2 && totalZero!=0) || grid[i][j]==99) return;
        
        if(grid[i][j]==2 && totalZero==0) {
            totalPath++;
            return;
        }
        
        if(grid[i][j]==0)   totalZero--;
        
        int temp = grid[i][j];
        grid[i][j] = 99;
        
        dfs(grid,i+1,j,totalZero);
        dfs(grid,i-1,j,totalZero);
        dfs(grid,i,j+1,totalZero);
        dfs(grid,i,j-1,totalZero);
        
        grid[i][j] = temp;   //backtracking
    }
    
    int uniquePathsIII(vector<vector<int>>& grid) {
        int totalZero = 0;
        int x,y;
        for(int i=0;i<grid.size();i++) {
            for(int j=0;j<grid[0].size();j++) {
                if(grid[i][j] == 1) {
                    x = i;
                    y = j;
                }
                if(grid[i][j] == 0) {
                    totalZero++;
                }
            }
        }
        dfs(grid,x,y,totalZero);
        return totalPath;
    }
};
