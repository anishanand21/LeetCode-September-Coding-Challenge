Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:
Input: k = 3, n = 7
Output: [[1,2,4]]

Example 2:
Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]


class Solution {
     vector<vector<int>> ans;
     int target , maxIndex ;
     void getCombinations (vector<int> temp , int currIndex , int sum , int val ){
         if( currIndex == maxIndex ){
             if( sum < target ) return;  //if  after reaching maxIndex sum != Target then return
             ans.push_back( temp );  // Pushing the Temporary Vector  to Ans Vector
             return;
         }
         for( int j = val ; j < 10 ; j++ ){
             temp[ currIndex ] = j;  // Storing Current Value
             if( sum + temp[ currIndex ] > target )  break; //Breaks the loop when value crossing the target
             getCombinations( temp , currIndex + 1 , sum + temp[ currIndex ] , j + 1 );
         }
     }
public:
    vector<vector<int>> combinationSum3(int k, int n) {
       target = n , maxIndex = k;   // Initializing maxIndex and Target
       vector<int> temp( k , 0 );
       getCombinations(temp , 0 , 0 , 1 );
       return ans;
    }
};
