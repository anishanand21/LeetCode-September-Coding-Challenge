Compare two version numbers version1 and version2.
If version1 > version2 return 1; if version1 < version2 return -1;otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.

The . character does not represent a decimal point and is used to separate number sequences.

For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

You may assume the default revision number for each level of a version number to be 0. For example, version number 3.4 has a revision number of 3 and 4 for its first and second level revision number. Its third and fourth level revision number are both 0.

Example 1:
  Input: version1 = "0.1", version2 = "1.1"
  Output: -1

Example 2:
  Input: version1 = "1.0.1", version2 = "1"
  Output: 1

Example 3:
  Input: version1 = "7.5.2.4", version2 = "7.5.3"
  Output: -1

Example 4:
  Input: version1 = "1.01", version2 = "1.001"
  Output: 0
  Explanation: Ignoring leading zeroes, both “01” and “001" represent the same number “1”

Example 5:
  Input: version1 = "1.0", version2 = "1.0.0"
  Output: 0
  Explanation: The first version number does not have a third level revision number, which means its third level revision number is default to "0"

Explanation
  The question is easy but the edge cases make it a bit difficult to work out (at least in C++).
  Here are the steps I followed:

  Run a single loop over both the strings, v1 and v2.
  Keep two temporary strings, s1 and s2 to accumulate the characters of v1 and v2, respectively, till you encounter .
  Now, it's time to compare the strings, s1 and s2. First, compare their lengths. The larger length string is greater than the other, according to the question. If they have the same lengths, then you need to compare them lexicographically. Use s1.compare(s2) for this.
  Return the result accordingly.

Code:

class Solution {
public:
    int compareVersion(string v1, string v2) {
        int ans = 0;
        int n1 = v1.size(), n2 = v2.size();
        
        for(int i=0,j=0; i<n1 || j<n2; ++i, ++j) {
            
            string s1 = "", s2 = "";

            while(i<n1 && v1[i] != '.') {
                if(s1.size() == 0 && v1[i] == '0') {
                    ++i; continue;
                }
                
                s1 += v1[i++];
            }
            
            while(j<n2 && v2[j] != '.') {
                if(s2.size() == 0 && v2[j] == '0') {
                    ++j; continue;
                }
                
                s2 += v2[j++];
            }
            
            if(s1.size() < s2.size()) return -1;
            else if(s2.size() < s1.size()) return 1;
            
            ans = s1.compare(s2);
            if(ans < 0) return -1;
            else if(ans > 0) return 1;
        }
        
        return 0;
        
    }
};
