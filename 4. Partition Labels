A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:
  Input: S = "ababcbacadefegdehijhklij"
  Output: [9,7,8]
  Explanation:
  The partition is "ababcbaca", "defegde", "hijhklij".
  This is a partition so that each letter appears in at most one part.
  A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
  
  
The approach used to solve this pretty is straightforward.
  1. In the first pass, I used a map in which I stored the frequency of each letter and a bool value that keeps track whether it is present in a partition (initally set to false for each letter).

  2. In the second pass I created an imaginary partition in which I kept track of the sum, adding an element's frequency to it if it's bool value is set to false (and updating it with true), otherwise decreasing the value of sum by 1 at each stage, until it reaches 0. Once the sum reaches 0, I appended the length of the imaginary partition to the output vector.
  
class Solution {
public:
    vector<int> partitionLabels(string S) {
        vector<pair<int, bool>> mp(26, {0, false}); //{frequency, isPresent}
        for(char &ch : S){
            int curr = ch - 'a';
            mp[curr].first++;
        }
        vector<int> op;
        int sum = 0; //sum of imaginary partition
        int l = 0; //length of imaginary partition
        for(char &ch : S){
            int curr = ch - 'a';
            l++;
            if(!mp[curr].second){
                sum += (mp[curr].first - 1);
                mp[curr].second = true;
            }
            else{
                sum--;
            }
            if(sum == 0){
                op.push_back(l);
                l = 0;
            }
        }
        return op;
    }
};
