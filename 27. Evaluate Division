You are given equations in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating-point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.

Example 1:
Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]

Example 2:
Input: equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
Output: [3.75000,0.40000,5.00000,0.20000]

Example 3:
Input: equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
Output: [0.50000,2.00000,-1.00000,-1.00000]


EXPLANATION:
  Build a graph with the given equations, and add their values
  Process queries
  For strings that do not belong int the map store -1;
  Do a DFS for ones that do, make a hashmap to store visited values
  If both strings same or have already seen a return -1
  For every divisor of a find cost of doing dfs till reaching b
  If reached return product of going from a to its divisor and divisor to b

CODE:

class Solution {
public:
    unordered_map<string,int> seen;
    double dfs(unordered_map<string, set<pair<string,double>>> &graph, string a, string b){
        if(a==b) return 1.0;
        if(seen[a]) return -1;
        seen[a] = 1;
        for(auto to: graph[a]){
            double go = dfs(graph, to.first, b);
            if(go!=-1)
                return to.second*go;
        }
        return -1;
    }
    
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        
        unordered_map<string, set<pair<string,double>>> graph;
        
        for(int i=0; i<equations.size(); i++){
            auto node = equations[i];
            graph[node[0]].insert({node[1], values[i]});
            graph[node[1]].insert({node[0], 1.0/values[i]});
        }
        
        vector<double> ans;
        
        for(auto& q: queries){
            double res;
            if(graph.find(q[0]) == graph.end() || graph.find(q[1]) == graph.end())
                res = -1.0;
            else {
                seen.clear();
                res = dfs(graph, q[0], q[1]);
            }
            ans.push_back(res);
        }
        return ans;
    }
};
